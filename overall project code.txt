1. Preparing Data Set Using Questionery

import pandas as pd
a=pd.read_csv(r"C:\Users\Dell\OneDrive\Desktop\new.csv")
a["TextBook"]=a["e1tb"].fillna("")+a["m1tb"].fillna("")+a["m2tb"].fillna("")+a["aptb"].fillna("")+a["cptb"].fillna("")+a["edtb"].fillna("")+a["e2tb"].fillna("")+a["m3tb"].fillna("")+a["actb"].fillna("")+a["ooptb"].fillna("")+a["estb"].fillna("")+a["emtb"].fillna("")+a["rtb"].fillna("")+a["mfcstb"].fillna("")+a["dldtb"].fillna("")+a["pytb"].fillna("")+a["dstb"].fillna("")+a["cgtb"].fillna("")+a["setb"].fillna("")+a["jptb"].fillna("")+a["adstb"].fillna("")+a["cotb"].fillna("")+a["flattb"].fillna("")+a["ppltb"].fillna("")+a["pstb"].fillna("")+a["cdtb"].fillna("")+a["uptb"].fillna("")+a["umltb"].fillna("")+a["dbmstb"].fillna("")+a["ostb"].fillna("")+a["pehvtb"].fillna("")+a["cntb"].fillna("")+a["dwdmtb"].fillna("")+a["daatb"].fillna("")+a["stmtb"].fillna("")+a["aitb"].fillna("")+a["ittb"].fillna("")+a["cstb"].fillna("")+a["dsptb"].fillna("")+a["emstb"].fillna("")+a["rotb"].fillna("")+a["iprptb"].fillna("")+a["cnstb"].fillna("")+a["sadptb"].fillna("")+a["wttb"].fillna("")+a["mefatb"].fillna("")+a["bdatb"].fillna("")+a["irstb"].fillna("")+a["mctb"].fillna("")+a["cctb"].fillna("")+a["spmtb"].fillna("")+a["sltb"].fillna("")+a["distb"].fillna("")+a["mstb"].fillna("")+a["mltb"].fillna("")+a["coptb"].fillna("")+a["anntb"].fillna("")+a["ortb"].fillna("")

del a["e1tb"]
del a["m1tb"]
del a["m2tb"]
del a["aptb"]
del a["cptb"]
del a["edtb"]
del a["e2tb"]
del a["m3tb"]
del a["actb"]
del a["ooptb"]
del a["estb"]
del a["emtb"]
del a["rtb"]
del a["mfcstb"]
del a["dldtb"]
del a["pytb"]
del a["dstb"]
del a["cgtb"]
del a["setb"]
del a["jptb"]
del a["adstb"]
del a["cotb"]
del a["flattb"]
del a["ppltb"]
del a["pstb"]
del a["cdtb"]
del a["uptb"]
del a["umltb"]
del a["dbmstb"]
del a["ostb"]
del a["pehvtb"]
del a["cntb"]
del a["dwdmtb"]
del a["daatb"]
del a["stmtb"]
del a["aitb"]
del a["ittb"]
del a["cstb"]
del a["dsptb"]
del a["emstb"]
del a["rotb"]
del a["iprptb"]
del a["cnstb"]
del a["sadptb"]
del a["wttb"]
del a["mefatb"]
del a["bdatb"]
del a["irstb"]
del a["mctb"]
del a["cctb"]
del a["spmtb"]
del a["sltb"]
del a["distb"]
del a["mstb"]
del a["mltb"]
del a["coptb"]
del a["anntb"]
del a["ortb"]


2.

''' NLP CODE FOR COMMENTS FOR ANALYSING WHETHER THE COMMENTS ARE POSITIVE OR NEGATIVE OR NEUTRAL.(33 lines) '''

import pandas as pd
import nltk
import string
import re
r=pd.read_csv(r"C:\Users\Dell\OneDrive\Documents\Book1.csv")

def cleanText(s):
	ms = re.sub(‘[0–9]+’, ‘‘,s)
	return(ms)
r["Comments"]=r.Comments.apply(cleanText)

r[‘clean_review_text’]=r[‘Comments’].str.lower()
r[‘clean_review_text’]=r[‘clean_review_text’].str.translate(str.maketrans(‘’,’’,string.punctuation))
sw=stopwords.words(‘english’)
def removeStopWords(sw, s):
	newtxt = ‘ ‘.join([word for word in s.split() if word not in sw])
	return newtxt
r[‘clean_review_text’] = [removeStopWords(sw,s) for s in r[‘clean_review_text’]]

nltk.download(‘vader_lexicon’)
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
sss=[]
ssf=[]
for i in r['clean_review_text']:
     sr=sent_mod.polarity_scores(i)
     ss=sr['compound']
     sss.append(ss)
     if sr['compound']>=0.05:
             ssf.append("positive")
     elif(sr['compound']<=0.05):
             ssf.append("negative")
     else:
             ssf.append("neutral")
r['scores']=sss
r['scoreStatus']=ssf
r.to_csv(r"C:\Users\Dell\OneDrive\Desktop\Book1.csv")


3
''' CALCULATING SUPPORT AND CONFIDENCE AND LIFT - "IF A SINGLE TEXTBOOK IS PRESENT IN BOTH POSITIVE, NEGATIVE OR POSITIVE, NEUTRAL OR POSITIVE, NEGATIVE, NEUTRAL THEN THERE IS A
CONFLICT THAT WHETHER WE HAVE TO CONSIDER THIS BOOK AS POSITIVE OR NEGATIVE OR NEUTRAL. (15 lines) ''' 

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
a=pd.read_excel(r"C:\Users\Dell\OneDrive\Desktop\Book1.xlsv")
t=[]
for i in range(505):
     t.append([str(a.values[i,j]) for j in range(2)])

from apyori import apriori
rule=apriori(transactions=t, min_support=0.001,min_confidence=0.1,min_lift=1,min_length=2,max_length=2)
out=list(rule)
print(len(out))
349

df=pd.DataFrame(columns=['lhs','rhs','support','confidence','lift'])
for i in range(len(out)):
...     df=df.append({"lhs":out[i][2][0][0],"rhs":out[i][2][0][1],"support":out[i][1],"confidence":out[i][2][0][2],"lift":out[i][2][0][3]},ignore_index=True)
...
print(df)
df.to_csv(r"C:\Users\Dell\OneDrive\Desktop\scl.csv")



4. '''Label Encoding'''

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
a=pd.read_excel(r"C:\Users\Dell\OneDrive\Desktop\abc.xlsx")
le=LabelEncoder()
l=le.fit_transform(a.SubjectName)
a["subtarget"]=l
a["RDtarget"]=le.fit_transform(a.ReaderDetails)
a["Ptarget"]=le.fit_transform(a.Purpose_of_Reading)
a["Dtarget"]=le.fit_transform(a.Duration)
a["BLtarget"]=le.fit_transform(a.BookLevel)
a["ULtarget"]=le.fit_transform(a.UnderstandingLevel)
a["SStarget"]=le.fit_transform(a.scoreStatus)
a["TBtarget"]=le.fit_transform(a.TextBook)
a.to_excel(r"C:\Users\Dell\OneDrive\Desktop\Book1.xlsx")

5. ''' Performance Evaluation - MAE and accuracy'''


from sklearn.linear_model import LogisticRegression
import pandas as pd
a=pd.read_excel(r"C:\Users\Dell\OneDrive\Desktop\Book1.xlsx")
data=a.values
X, y = data[:, :-1], data[:, -1]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)
model = LogisticRegression()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)
print("Accuracy:",(accuracy_score(y_test, y_pred))*100)
precision=precision_score(y_test,y_pred,average='micro')
print("Precision:",(precision*100))
recall=recall_score(y_test,y_pred,average='micro')
print("recall:",(recall*100))
[[  9   2   0]
 [  2  30   0]
 [  0   0 154]]
Accuracy: 97.96
Precision: 97.96
Recall: 97.96

from sklearn import svm, datasets
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.model_selection import train_test_split
a=pd.read_excel(r"C:\Users\Dell\OneDrive\Desktop\Book1.xlsx")
data=a.values
X, y = data[:, :-1], data[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)
clf=svm.SVC(kernel='linear',C=1).fit(X_train,y_train)
y_pred=clf.predict(X_test)
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)
print("Accuracy:",(accuracy_score(y_test, y_pred))*100)
precision=precision_score(y_test,y_pred,average='micro')
print("Precision:",(precision*100))
recall=recall_score(y_test,y_pred,average='micro')
print("recall:",(recall*100))
[[ 10   1   0]
 [  0  32   0]
 [  0   0 154]]
Accuracy: 99.49238578680203
Precision: 99.49238578680203
recall: 99.49238578680203

from pandas import read_csv
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
import pandas as pd
a=pd.read_excel(r"C:\Users\Dell\OneDrive\Desktop\Book1.xlsx")
data=a.values
X, y = data[:, :-1], data[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)
model = RandomForestRegressor(random_state=0)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
import numpy as np
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
Mean Absolute Error: 0.07729977946579666
Mean Squared Error: 0.01438778186738426
Root Mean Squared Error: 0.11994908031070627



6.  '''front end web application using html'''

<html>
    <head>
        <title>
            Excel file upload and processing : Django Example : ThePythonDjango.Com
        </title>
    </head>
    <body style="margin-top: 30px;margin-left: 30px;">
	<center>
	<h1> PSCMR Book Recomndation System Form </h1>
        <form action="{% url "myapp:index" %}" method="post" enctype="multipart/form-data">
		<table border=1>
            {% csrf_token %}
			<tr><td style="text-align: center; color:Blue;vertical-align: middle;">Subject Name:</td><td style="text-align: center; color:Blue;vertical-align: middle;"> <select name="sub">
							<option value=""></option>
							<option value="Environmental Studies">Environmental Studies</value>
							<option value="SCRIPTING LANGUAGES">SCRIPTING LANGUAGES</value>
							<option value="Mathematics-III">Mathematics-III</value>
							<option value="SOFTWARE ARCHITECTURE AND DESIGN PATTERNS">SOFTWARE ARCHITECTURE AND DESIGN PATTERNS</value>
							<option value="DATA WARE HOUSING AND DATA MINING">DATA WARE HOUSING AND DATA MINING</value>
							<option value="Data Structures through C++">Data Structures through C++</value>
							<option value="Mathematical Foundations of Computer Science">Mathematical Foundations of Computer Science</value>
							<option value="EMBEDDED SYSTEMS">EMBEDDED SYSTEMS</value>
							<option value="Engineering Drawing">Engineering Drawing</value>
							<option value="Advanced Data Structures">Advanced Data Structures</value>
							<option value="INFORMATION RETRIEVAL SYSTEMS">INFORMATION RETRIEVAL SYSTEMS</value>
							<option value="Unix Programming">Unix Programming</value>
							
							<option value="OPERATING SYSTEMS">OPERATING SYSTEMS</value>
							<option value="COMPUTER NETWORKS">COMPUTER NETWORKS</value>
							<option value="Mathematics-II">Mathematics-II</value>
							<option value="MACHINE LEARNING">MACHINE LEARNING</value>
							<option value="SOFTWARE PROJECT MANAGEMENT">SOFTWARE PROJECT MANAGEMENT</value>
							<option value="MATHEMATICS-I">MATHEMATICS-I</value>
							<option value="English-I">English-I</value>
							<option value="OPERATION RESEARCH">OPERATION RESEARCH</value>
							<option value="Software Engineering">Software Engineering</value>
							<option value="CYBER SECURITY">CYBER SECURITY</value>
							<option value="Computer Programming">Computer Programming</value>
							<option value="ARTIFICIAL NEURAL NETWORKS">ARTIFICIAL NEURAL NETWORKS</value>
							<option value="MANAGEMENT SCIENCE">MANAGEMENT SCIENCE</value>
							<option value="CONCURRENT AND PARALLEL PROGRAMMING">CONCURRENT AND PARALLEL PROGRAMMING</value>
							<option value="Digital Logic Design">Digital Logic Design</value>
<option value="Python Programming">Python Programming</value>
<option value="Computer Graphics">Computer Graphics</value>
<option value="Java Programming">Java Programming</value>
<option value="Computer Organization">Computer Organization</value>
<option value="Formal Languages and Automata Theory">Formal Languages and Automata Theory</value>
<option value="Principles of Programming Languages">Principles of Programming Languages</value>
<option value="Probability and Statistics">Probability and Statistics</value>
<option value="Compiler Design">Compiler Design</value>
<option value="DISTRIBUTED SYSTEMS">DISTRIBUTED SYSTEMS</value>
<option value="DATA BASE MANAGEMENT SYSTEMS">DATA BASE MANAGEMENT SYSTEMS</value>
<option value="INTELLECTUAL PROPERTY RIGHTS AND PATENTS">INTELLECTUAL PROPERTY RIGHTS AND PATENTS</value>
<option value="Statistics with R Programming">Statistics with R Programming</value>
<option value="WEB TECHNOLOGIES">WEB TECHNOLOGIES</value>
<option value="CLOUD COMPUTING">CLOUD COMPUTING</value>
<option value="ROBOTICS">ROBOTICS</value>
<option value="MOBILE COMPUTING">MOBILE COMPUTING</value>
<option value="DIGITAL SIGNAL PROCESSING">DIGITAL SIGNAL PROCESSING</value>
<option value="MANAGERIAL ECONOMICS AND FINANCIAL ANALYSIS">MANAGERIAL ECONOMICS AND FINANCIAL ANALYSIS</value>
<option value="INTERNET OF THINGS">INTERNET OF THINGS</value>
<option value="ARTIFICIAL INTELLIGENCE">ARTIFICIAL INTELLIGENCE</value>
<option value="BIG DATA ANALYTICS">BIG DATA ANALYTICS</value>
<option value="OBJECT ORIENTED ANALYSIS & DESIGN USING UML">OBJECT ORIENTED ANALYSIS & DESIGN USING UML</value>
<option value="Object Oriented Programming through C++">Object Oriented Programming through C++</value>
<option value="Applied Chemistry">Applied Chemistry</value>
<option value="SOFTWARE TESTING METHODOLOGIES">SOFTWARE TESTING METHODOLOGIES</value>
<option value="DESIGN AND ANALYSIS OF ALGORITHMS">DESIGN AND ANALYSIS OF ALGORITHMS</value>
<option value="PROFESSIONAL ETHICSAND HUMAN VALUES">PROFESSIONAL ETHICSAND HUMAN VALUES</value>
<option value="Applied Physics">Applied Physics</value>
<option value="English-II">English-II</value>
<option value="Engineering Mechanics">Engineering Mechanics</value>
							
						  </select>
						  </td></tr>
			
			<tr><td colspan="2" style="text-align: center; color:Blue;vertical-align: middle;">Choose Book or Understand Level:</td><tr>
			<tr><td style="text-align: center; color:Blue;vertical-align: middle;">Book Level<select name="bl">
							<option value=""></value>
							<option value="Basic Level">BASIC</value>
							<option value="Intermediate Level">INTERMEDIATE</value>
							<option value="Advanced Level">ADVANCED</value>
						  </select></td>		    
			<td style="text-align: center; color:Blue;vertical-align: middle;">UnderStand Level <select name="userlevel">
							<option value=""></value>
							<option value="Slow Learner">Slow</value>
							<option value="Medium-Paced Learner">Medium</value>
							<option value="Fast Learner">Fast</value>
						  </select>
		    </td></tr>
            <tr><td colspan=2 style="text-align: center; color:Blue;vertical-align: middle;">
            <input type="submit"
                   value="submit"
                   style="border: 1px solid green; padding:5px; border-radius: 2px; cursor: pointer;"></td>
		    </tr>
			<table>
        </form>

        <p></p>
        <hr>
		<div class="col-sm-3">
			<table class="table table-bordered " border="1">
			<tr><td colspan="4" style="text-align: center; color:Blue;vertical-align: middle;"><b>Subject Details</b></td></tr>
			<tr><td style="text-align: center; color:Blue;vertical-align: middle;">TextBook</td><td style="text-align: center; color:Blue;vertical-align: middle;">Rating</td></tr>
			     {% for item1,item2 in excel_data %}
					<tr>
					<td style="text-align:left;color:green;vertical-align: middle;">{{ item1 }}</td>
					<td style="text-align:left;color:green;vertical-align: middle;">{{ item2 }}</td>
					</tr>					
				{% endfor %}			
                				
            </table>    
		</div>
		<br>
		</center>
    </body>
</html>



7. ''' Back end using Django.'''

from django.shortcuts import render
import openpyxl

def index(request):
    if "GET" == request.method:
        return render(request, 'myapp/index.html', {})
    else:
        subject= request.POST["sub"]
        booklevel = request.POST["bl"]
        print(booklevel)
        understandlevel=request.POST["userlevel"];
        print(understandlevel)

        # you may put validations here to check extension or file size

        #wb = openpyxl.load_workbook(excel_file)
        
        # Give the location of the file
        path = "C:\\Users\\Dell\\excelfile\\BookDetailsDataset.xlsx"

        #C:\Users\Dell\excelfile
 
        # To open the workbook
        # workbook object is created
        wb = openpyxl.load_workbook(path)

        # getting all sheets
        sheets = wb.sheetnames
        print(sheets)

        # getting a particular sheet
        worksheet = wb["Sheet1"]
        print(worksheet)

        # getting active sheet
        active_sheet = wb.active
        print(active_sheet)

        # reading a cell
        print(worksheet["A1"].value)
        
        
                

        excel_tb = list()
        excel_data = {}
        excel_rate=list()
        
       
        flag=0
        first_column = active_sheet["A"]
        second_column= active_sheet["F"]
        seconda_column=active_sheet["G"]
        third_column= active_sheet["I"]
        fourth_column= active_sheet["J"]
        
        rating_column=active_sheet["H"];
        
        # Print the contents
        #for row in worksheet.iter_rows():
        #row_data = list()
        
           
        i=0
        
        for x in range(len(first_column)):
            #print("hi")
            s1=str(first_column[x].value)
            #s1.split(' ')
            #s2 = 'OPERATING SYSTEMS'
            s2= str(subject)
            #s2.split(' ')
            #print(s1)
            #if s1 == s2 and second_column[x].value == 'Intermediate Level':
            # if book level code
            if str(booklevel)!= "" and str(understandlevel)=="":
                if s1 == s2 and str(second_column[x].value) == str(booklevel):
                    #excel_tb.append('Text Book:\t'+str(fourth_column[x].value)+'\t|User Comment:\t'+str(third_column[x].value))
                    excel_tb.append(''+str(fourth_column[x].value))
                    excel_rate.append(''+str(rating_column[x].value))
                    i+=1
            if str(booklevel)== "" and str(understandlevel)!="":
                if s1 == s2 and str(seconda_column[x].value) == str(understandlevel):
                    #excel_tb.append('Text Book:\t'+str(fourth_column[x].value)+'\t|User Comment:\t'+str(third_column[x].value))
                    excel_tb.append(''+str(fourth_column[x].value))
                    excel_rate.append(''+str(rating_column[x].value))
                    i+=1
            if str(booklevel)!= "" and str(understandlevel)!="":
                if s1 == s2 and str(second_column[x].value) == str(booklevel) and str(seconda_column[x].value) == str(understandlevel):
                    #excel_tb.append('Text Book:\t'+str(fourth_column[x].value)+'\t|User Comment:\t'+str(third_column[x].value))
                    excel_tb.append(''+str(fourth_column[x].value))
                    excel_rate.append(''+str(rating_column[x].value))
                    i+=1
            
        print(excel_tb)        
        
        if i==0:
            res="No TextBooks are Available............ "
            excel_tb.append(''+str(res))
            excel_rate.append('')
            
        excel_data = zip(excel_tb, excel_rate)
        context = {'excel_data': excel_data,}
                   
        #return render(request, 'myapp/index.html', {"excel_data":excel_tb,"excel_r":excel_rate})
        return render(request, 'myapp/index.html', context);

















 







